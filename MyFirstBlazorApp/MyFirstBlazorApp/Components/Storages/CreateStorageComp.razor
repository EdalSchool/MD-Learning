@using Entities
@using Business

<title>Manew | Product Storage</title>

<style>
    body {
        margin: 0;
        font-family: 'Quicksand', sans-serif;
    }

    .login {
        width: 100%;
        margin-top: 100px;
        display: grid;
        place-items: center;
    }


    .form-container {
        display: grid;
        grid-template-rows: auto 1fr auto;
        width: 300px;
    }

    .form {
        display: flex;
        flex-direction: column;
    }

        .form div {
            display: flex;
            flex-direction: column;
        }

    .label {
        font-size: var(--sm);
        font-weight: bold;
        margin-bottom: 4px;
    }

    .form-input {
        margin-bottom: 25px;
    }

    .input {
        color: black;
        background-color: var(--text-input-field);
        border-color: var(--text-input-field);
        border-radius: 8px;
    }

    .form a {
        text-align: center;
        font-size: var(--sm);
        color: var(--hospital-green);
        text-decoration: none;
    }

    .login-btn {
        margin-top: 15px;
        margin-bottom: 30px;
    }

    .signup-btn {
        margin-top: 25px;
    }
</style>

<EditForm Model="oStorage" OnValidSubmit=@SaveStorage>
    <DataAnnotationsValidator />
    <body class="justify-content-center">
        <div class="login">
            <div class="form-container">
                <p class="title">
                    <span><a href=""><i class="fa-solid fa-chevron-left title-icon fa-sm"></i></a></span>
                    <span>Storing a product</span>
                </p>

                <div class="form">
                    <div>
                        <div class="form-group form-input">
                            <label for="product" class="label">Which product do you want to store?</label>
                            <InputSelect @bind-Value="oStorage.ProductId" class="input form-control form-select" id="product">
                                <option value="">Products...</option>
                                @foreach (var product in products)
                                {
                                    <option value="@product.ProductId">@product.ProductName</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => oStorage.ProductId" />
                        </div>
                    </div>

                    <div>
                        <div class="form-group form-input">
                            <label for="warehouse" class="label">And where?</label>
                            <InputSelect @bind-Value="oStorage.WarehouseId" class="input form-control form-select" id="warehouse">
                                <option value="">Warehouses...</option>

                                @foreach (var warehouse in warehouses)
                                {
                                    <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => oStorage.WarehouseId" />
                        </div>
                    </div>

                    <button type="submit" class="primary-btn signup-btn">Save</button>

                    <br />
                    <p class="text-center">@message</p>
                </div>
            </div>
        </div>
    </body>
</EditForm>

@code {
    Storage oStorage = new Storage();

    List<Warehouse> warehouses = new List<Warehouse>();
    List<Product> products = new List<Product>();
    string message = "";

    protected override async Task OnInitializedAsync()
    {
        warehouses = BsWarehouse.WarehouseList();
        products = BsProduct.ProductList();
    }

    private void SaveStorage()
    {
        oStorage.StorageId = $"{oStorage.WarehouseId}-{oStorage.ProductId}";

        if (!BsStorage.IsProductInWarehouse(oStorage.ProductId, oStorage.WarehouseId))
        {
            oStorage.LastUpdate = DateTime.Now;
            BsStorage.StorageCreation(oStorage);

            message = "Product successfully stored!";
        }
        else
        {
            message = "This product has alredy been stored in this warehouse";
        }
    }
}

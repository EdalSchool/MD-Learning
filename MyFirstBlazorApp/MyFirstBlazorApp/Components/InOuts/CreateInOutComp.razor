@using Entities
@using Business

<div class="form-group">
    <select class="form-control" @onchange="ChangedWarehouse">
        <option value="">Select a warehouse...</option>
        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
        }
    </select>
</div>
<hr />
<EditForm Model="oInOut">
    <div class="form-group"
            <InputSelect class="form-control" @bind-Value="oInOut.StorageId">
                <option value="">Select a product...</option>
            @foreach (var storage in storages)
            {
                        <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
            </InputSelect>
        </div>
    <div class="form-group"
        <label>Write the quantity</label>
            <InputNumber class="form-control" @bind-Value="oInOut.Quantity"/>
        </div>
    <div class="form-group">
        <label>It's an input?</label>
        <InputCheckbox class="form-control" @bind-Value="oInOut.IsInput" />
    </div>

    <input class="btn btn-outline-success" type="button" value="@buttonValue" @onclick="SaveInOut" />
</EditForm>

@code {
    InOut oInOut = new InOut();
    List<Warehouse> warehouses = new List<Warehouse>();
    List<Storage> storages = new List<Storage>();

    string buttonValue => oInOut.IsInput ? "Check In" : "Check Out";

    protected override async Task OnInitializedAsync()
    {
        warehouses = BsWarehouse.WarehouseList();
    }

    private void ChangedWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();

        storages = BsStorage.StorageByWarehouse(idWarehouse);
    }

    private void SaveInOut()
    {

    }
}

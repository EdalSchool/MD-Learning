@using Entities
@using Business

<title>MANEW | Register an Entry or an Exit</title>

<div class="alert alert-primary bg-gradient alert-dismissible fade show" role="alert">
  <p class="mb-0"><i class="text-warning fa-solid fa-triangle-exclamation fa-2xl"></i>  <strong>Remember!</strong> To register an entry or exit of a product, you must first <a href="storage/create">store it</a> in its proper Branch.</p>
  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
<EditForm Model="oInOut" OnValidSubmit="@SaveInOut">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <select class="form-control" @onchange="ChangedWarehouse">
            <option value="">Select a warehouse...</option>
            @foreach (var warehouse in warehouses)
            {
                <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
            }
        </select>
    </div>
    <hr />
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="oInOut.StorageId">
            <option value="">Select a product...</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>
    <hr />
    <div class="form-group">
        <label>Write the quantity</label>
        <InputNumber class="form-control" @bind-Value="oInOut.Quantity" />
    </div>
    <hr />
    <div class="form-group h4">
        <InputCheckbox class="form-check-input" type="check" @bind-Value="oInOut.IsInput" />
        <br />
        <label>@labelValue</label>
    </div>
    <div>
        <input class="btn btn-outline-success" type="submit" value="@buttonValue" />
    </div>
</EditForm>
<p class="text-center h4">@message</p>

@code {
    List<Warehouse> warehouses = new List<Warehouse>();
    List<Storage> storages = new List<Storage>();
    InOut oInOut = new InOut();
    Product oProduct = new Product();
    Storage oStorage = new Storage();

    string message;
    string labelValue => oInOut.IsInput ? "It's a Purchase" : "It's a Sale";
    string buttonValue => oInOut.IsInput ? "Check In" : "Check Out";

    protected override async Task OnInitializedAsync()
    {
        warehouses = BsWarehouse.WarehouseList();
    }

    private void ChangedWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();

        storages = BsStorage.StorageByWarehouse(idWarehouse);
    }

    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;

        if (oInOut.IsInput)
        {
            oStorage.ProductQuantity = oStorage.ProductQuantity + oInOut.Quantity;
            BsStorage.StorageUpdate(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            BsProduct.ProductUpdate(oProduct);

            message = $"The product {oProduct.ProductName} was saved";
        }
        else
        {
            if (ItsBiggerThanZero(oInOut.Quantity, oStorage.ProductQuantity))
            {
                oStorage.ProductQuantity = oStorage.ProductQuantity - oInOut.Quantity;
                BsStorage.StorageUpdate(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                BsProduct.ProductUpdate(oProduct);

                message = $"The product {oProduct.ProductName} was saved";
            }
            else
            {
                message = $"There is not enough quantity in the warehouse for the product {oProduct.ProductName}";
            }
        }
    }

    private bool ItsBiggerThanZero(int quantity, int storageQuantity)
    {
        if (storageQuantity > quantity)
        {
            return true;
        }
        return false;
    }
}

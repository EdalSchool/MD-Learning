@using Entities
@using Business

<title>Manew | Register a purchase or a sale</title>

<style>
    body {
        margin: 0;
        font-family: 'Quicksand', sans-serif;
    }

    .login {
        width: 100%;
        margin-top: 100px;
        display: grid;
        place-items: center;
    }


    .form-container {
        display: grid;
        grid-template-rows: auto 1fr auto;
        width: 300px;
    }

    .form {
        display: flex;
        flex-direction: column;
    }

        .form div {
            display: flex;
            flex-direction: column;
        }

    .label {
        font-size: var(--sm);
        font-weight: bold;
        margin-bottom: 4px;
    }

    .form-input {
        margin-bottom: 25px;
    }

    .input {
        color: black;
        background-color: var(--text-input-field);
        border-color: var(--text-input-field);
        border-radius: 8px;
    }

    .form a {
        text-align: center;
        font-size: var(--sm);
        color: var(--hospital-green);
        text-decoration: none;
    }

    .login-btn {
        margin-top: 15px;
        margin-bottom: 30px;
    }

    .signup-btn {
        margin-top: 25px;
    }

    .storein-alert {
        padding: 6px;
        border-radius: 12px;
        background-color: var(--hospital-green);
    }
</style>

<EditForm Model="oInOut" OnValidSubmit="@SaveInOut">
    <DataAnnotationsValidator />
    <body class="d-flex justify-content-center">
        <div class="login">
            <div class="form-container">
                <p class="title">
                    <span><a href=""><i class="fa-solid fa-chevron-left title-icon fa-sm"></i></a></span>
                    <span>Registering @h4Value</span>
                </p>

                <div class="form">
                    <div>
                        <a class="btns btn btn-sm btn-light border border-danger" href="storage/create" data-bs-toggle="tooltip" data-bs-placement="top" title="To register a purcahse or a sale you must store the product in its proper warehouse">
                            Store a product in a warehouse
                        </a>

                        <div class="form-input">
                            <ValidationMessage For="() => oInOut.StorageId" />
                        </div>
                        <div class="form-group form-input">
                            <label for="inout-warehouse" class="label">Warehouse</label>
                            <select @onchange="ChangedWarehouse" class="input form-control form-select" id="inout-warehouse">
                                <option value="">Select...</option>
                                @foreach (var warehouse in warehouses)
                                {
                                    <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
                                }
                            </select>
                        </div>

                        <div class="form-group form-input">
                            <label for="inout-product" class="label">Product</label>
                            <InputSelect @bind-Value="oInOut.StorageId" class="input form-control form-select" id="inout-product">
                                <option value="">Select...</option>
                                @foreach (var storage in storages)
                                {
                                    <option value="@storage.StorageId">@storage.Product.ProductName</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-input">
                            <label for="number-input" class="label">Quantity</label>
                            <InputNumber @bind-Value="oInOut.Quantity" class="input form-control" id="number-input" />
                            <ValidationMessage For="() => oInOut.Quantity" />
                        </div>

                        <p class="form-input">
                            <span><InputCheckbox class="form-check-input active" id="input-checkbox" type="check" @bind-Value="oInOut.IsInput" /></span> <span>@labelValue</span>
                        </p>
                    </div>

                    <button type="submit" class="primary-btn signup-btn">@buttonValue</button>
                    <br />
                    <p class="text-center">@message</p>
                </div>
            </div>
        </div>
    </body>
</EditForm>

@code {
    List<Warehouse> warehouses = new List<Warehouse>();
    List<Storage> storages = new List<Storage>();
    InOut oInOut = new InOut();
    Product oProduct = new Product();
    Storage oStorage = new Storage();

    string message = "";
    string h4Value => oInOut.IsInput ? "a purchase" : "a sale";
    string labelValue => oInOut.IsInput ? "This is a purchase" : "This is a sale";
    string buttonValue => oInOut.IsInput ? "Check In" : "Check out";

    protected override async Task OnInitializedAsync()
    {
        warehouses = BsWarehouse.WarehouseList();
    }

    private void ChangedWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();

        storages = BsStorage.StorageByWarehouse(idWarehouse);
    }

    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;


        if (oInOut.IsInput)
        {
            oStorage.ProductQuantity = oStorage.ProductQuantity + oInOut.Quantity;
            BsStorage.StorageUpdate(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            BsProduct.ProductUpdate(oProduct);

            message = $"The product '{oProduct.ProductName}' changes were successfully saved";
        }
        else
        {
            if (ItsBiggerThanZero(oInOut.Quantity, oStorage.ProductQuantity))
            {
                oStorage.ProductQuantity = oStorage.ProductQuantity - oInOut.Quantity;
                BsStorage.StorageUpdate(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                BsProduct.ProductUpdate(oProduct);

                message = $"The product '{oProduct.ProductName}' chagnes were successfully saved";
            }
            else
            {
                message = $"The quantity of the product '{oProduct.ProductName}' is less than the quantity for sale";
            }
        }
    }



    private bool ItsBiggerThanZero(int quantity, int storageQuantity)
    {
        if (storageQuantity > quantity)
        {
            return true;
        }
        return false;
    }
}

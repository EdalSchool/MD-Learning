@using Entities
@using Business

<title>Manew | Product Storage</title>
<div class="d-flex justify-content-between">
    <div class="form-group">
        <h4><a class="" href=""><i class="text-danger fa-solid fa-angle-left"></i></a> Storing a Product</h4>
    </div>
    @if (!warehouses.Any())
    {
        <a style="border-radius: 10px;" class="btn btn-light border border-danger" href="warehouse/create" data-bs-toggle="tooltip" data-bs-placement="top" title="New Warehouse">Create Warehouse</a>
    }
</div>


<EditForm Model="oStorage" OnValidSubmit=@SaveStorage>
    <DataAnnotationsValidator />
    <div class="form-group">
        <h6>Which product do you want to store?</h6>
        <InputSelect @bind-Value="oStorage.ProductId" class="form-select">
            <option value="">Products...</option>
            @foreach (var product in products)
            {
                <option value="@product.ProductId">@product.ProductName</option>
            }
        </InputSelect>
        <ValidationMessage For="() => oStorage.ProductId" />
    </div>
    <br />
    <div class="form-group">
        <h6>And Where?</h6>
        <InputSelect @bind-Value="oStorage.WarehouseId" class="form-select">
            <option>Warehouses...</option>
            @foreach (var warehouse in warehouses)
            {
                <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
            }
        </InputSelect>
        <ValidationMessage For="() => oStorage.WarehouseId" />
    </div>
    <br />

    <button type="submit" class="savebtn btn"><i style="padding-right: 4px;" class="text-success fa-solid fa-check"></i> Save</button>
    <a href="" class="cancelbtn btn"><i style="padding-right: 4px;" class="text-danger fa-solid fa-xmark"></i> Cancel</a>
</EditForm>
<br />
<h4 class="text-center">
    @message
</h4>

@code {
    Storage oStorage = new Storage();

    List<Warehouse> warehouses = new List<Warehouse>();
    List<Product> products = new List<Product>();
    string message = "";

    protected override async Task OnInitializedAsync()
    {
        warehouses = BsWarehouse.WarehouseList();
        products = BsProduct.ProductList();
    }

    private void SaveStorage()
    {
        oStorage.StorageId = $"{oStorage.WarehouseId}-{oStorage.ProductId}";

        if (!BsStorage.IsProductInWarehouse(oStorage.ProductId, oStorage.WarehouseId))
        {
            oStorage.LastUpdate = DateTime.Now;
            BsStorage.StorageCreation(oStorage);

            message = "Product successfully stored";
        }
        else
        {
            message = "This product has alredy been stored in this Warehouse";
        }
    }
}

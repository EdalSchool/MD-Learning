@using Entities
@using Business

<title>Manew | Register an Entry or an Exit</title>


<style>
    .info {
        border-radius: 10px;
        background-color: #DC3545;
    }

    .a-link {
        text-decoration: underline dotted white;
    }

        .a-link:hover {
            text-decoration: underline white;
        }
</style>

<div>
    <p class="info text-white" style="padding: 10px;"><i style="padding-right: 14px;" class="text-white fa-solid fa-circle-exclamation fa-xl"></i> <strong>Remember!</strong> To register an entry or exit of a product, you must first <a class="text-white a-link" href="storage/create">store it</a> in its proper Warehouse</p>
</div>
<br />
<h4><a class="" href=""><i class="text-danger fa-solid fa-angle-left"></i></a> Registering an @h4Value</h4>
<div class="form-group">
    <h6>Select a Warehouse...</h6>
    <select class="form-select" @onchange="ChangedWarehouse">
        <option value="">Select a warehouse...</option>
        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
        }
    </select>
</div>
<br />
<EditForm Model="oInOut" OnValidSubmit="@SaveInOut">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <h6>Select a Product...</h6>
        <InputSelect class="form-select" @bind-Value="oInOut.StorageId">
            <option value="">Select a product...</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>
    <br />
    <div class="form-group">
        <h6>How much?</h6>
        <InputNumber class="form-control" @bind-Value="oInOut.Quantity" />
    </div>
    <br />
    <div calss="form-group">
        <label>It's a Purcahse?</label> <InputCheckbox class="form-check-input active" type="check" @bind-Value="oInOut.IsInput" /> <label>@labelValue</label>
    </div>
    <br />
    <div>
        <button type="submit" class="savebtn btn"><i style="padding-right: 4px;" class="text-success fa-solid fa-check"></i> @buttonValue</button>
        <a href="" class="cancelbtn btn"><i style="padding-right: 4px;" class="text-danger fa-solid fa-xmark"></i> Cancel</a>
    </div>
</EditForm>
<h4 class="text-center">@message</h4>

@code {
    List<Warehouse> warehouses = new List<Warehouse>();
    List<Storage> storages = new List<Storage>();
    InOut oInOut = new InOut();
    Product oProduct = new Product();
    Storage oStorage = new Storage();

    string message = "";
    string h4Value => oInOut.IsInput ? "Entry" : "Output";
    string labelValue => oInOut.IsInput ? "Yes" : "No, it's a Sale";
    string buttonValue => oInOut.IsInput ? "Check In" : "Check Out";

    protected override async Task OnInitializedAsync()
    {
        warehouses = BsWarehouse.WarehouseList();
    }

    private void ChangedWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();

        storages = BsStorage.StorageByWarehouse(idWarehouse);
    }

    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;

        if (oInOut.IsInput)
        {
            oStorage.ProductQuantity = oStorage.ProductQuantity + oInOut.Quantity;
            BsStorage.StorageUpdate(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            BsProduct.ProductUpdate(oProduct);

            message = $"The product {oProduct.ProductName} changes were successfully saved";
        }
        else
        {
            if (ItsBiggerThanZero(oInOut.Quantity, oStorage.ProductQuantity))
            {
                oStorage.ProductQuantity = oStorage.ProductQuantity - oInOut.Quantity;
                BsStorage.StorageUpdate(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                BsProduct.ProductUpdate(oProduct); 

                message = $"TThe product {oProduct.ProductName} changes were successfully saved";
            }
            else
            {
                message = $"The quantity of the product {oProduct.ProductName} is less than the quantity for sale";
            }
        }
    }

    private bool ItsBiggerThanZero(int quantity, int storageQuantity)
    {
        if (storageQuantity > quantity)
        {
            return true;
        }
        return false;
    }
}
